{"version":3,"sources":["components/Alert.tsx","components/Weather.tsx","store/types.ts","App.tsx","store/actions/weatherAction.ts","store/actions/alertAction.ts","store/reducer/weatherReducer.ts","store/reducer/alertReducer.ts","store/index.ts","index.tsx"],"names":["Alert","message","onClose","className","onClick","style","justifyContent","Weather","data","data2","year","population","SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","resultc","handleChange","event","fahrenhit","celsiusData","chartd","map","item","toFixed","setChartd","console","log","setFahrenhit","farhanitData","changeBarChar","value","dt_txt","Date","toDateString","push","main","temp","useState","dt_text","weather","setWeather","useEffect","localData","result","Map","has","set","FormControl","component","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","control","Radio","checked","color","label","spaceBetween","slidesPerView","navigation","onSwiper","swiper","onSlideChange","Paper","valueField","argumentField","GET_WEATHER_LIST","SET_LOADING","SET_ERROR","SET_ALERT","App","dispatch","useDispatch","weatherDataList","useSelector","state","list","loading","error","alertMsg","alert","type","a","fetch","res","ok","json","resData","Error","payload","initialState","city","cnt","code","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.812430b4.chunk.js","sourcesContent":["import React, {FC} from 'react';\r\n\r\n\r\ninterface AlertProps {\r\n    message: string;\r\n    onClose:  ()=> void \r\n}\r\n\r\nconst Alert: FC<AlertProps> =(message, onClose) =>{\r\n\r\n    return(\r\n        <div className=\"model is-active has-text-centered\">\r\n            <div className=\"model-bacground\" onClick={onClose}></div>\r\n            <div className=\"model-card\">\r\n              <header className=\"modal-card-head has-background-danger\">\r\n                  <p className=\"model-card-title has-text-white\">\r\n                      {message}\r\n                  </p>\r\n              </header>\r\n              <footer style={{justifyContent: \"center\"}} className=\"model-card-foot\">\r\n                    <button className=\"button\" onClick={onClose}></button>\r\n              </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert; ","import { stringify } from \"querystring\";\r\nimport React, { FC, useEffect, useState } from \"react\";\r\nimport {\r\n  WeatherData,\r\n  WeatherDataList,\r\n  WeatherDataa,\r\n  WeatherState,\r\n} from \"../store/types\";\r\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\r\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from \"swiper\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\n\r\nimport { resourceLimits } from \"worker_threads\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n  Tooltip,\r\n} from \"@devexpress/dx-react-chart-material-ui\";\r\n\r\ninterface WeatherProps {\r\n  data: WeatherDataList[];\r\n}\r\n\r\nconst Weather: FC<WeatherProps> = ({ data }) => {\r\n  const data2 = [\r\n    { year: \"\", population: 0 },\r\n    { year: \"\", population: 0 },\r\n    { year: \"\", population: 0 },\r\n    { year: \"\", population: 0 },\r\n    { year: \"\", population: 0 },\r\n    { year: \"\", population: 0 },\r\n    { year: \"\", population: 0 },\r\n  ];\r\n\r\n  SwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\r\n  const resultc: any = [];\r\n  const handleChange = (event: any) => {\r\n    if (fahrenhit) {\r\n      const celsiusData = chartd.map((item) => {\r\n        item.year = (((item.population - 32) * 5) / 9).toFixed(2) + \"C\";\r\n        item.population = ((item.population - 32) * 5) / 9;\r\n        return item;\r\n      });\r\n\r\n      setChartd(celsiusData);\r\n      console.log(celsiusData);\r\n\r\n      setFahrenhit(false);\r\n    }\r\n    if (!fahrenhit) {\r\n      const farhanitData = chartd.map((item) => {\r\n        item.year = ((item.population * 9) / 5 + 32).toFixed(2) + \"C\";\r\n        item.population = (item.population * 9) / 5 + 32;\r\n        return item;\r\n      });\r\n      setChartd(farhanitData);\r\n      console.log(chartd);\r\n      setFahrenhit(true);\r\n    }\r\n  };\r\n\r\n  const changeBarChar = (value: any) => {\r\n    if (fahrenhit) {\r\n      data.map((item) => {\r\n        item.dt_txt = new Date(item.dt_txt).toDateString();\r\n        if (item.dt_txt == value) {\r\n          \r\n          resultc.push({\r\n            year: (item.main.temp * 1.8 - 459.67).toFixed(2) + \"F\",\r\n            population: item.main.temp * 1.8 - 459.67,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!fahrenhit) {\r\n      data.map((item) => {\r\n        item.dt_txt = new Date(item.dt_txt).toDateString();\r\n        if (item.dt_txt == value) {\r\n          debugger;\r\n          resultc.push({\r\n            year: (item.main.temp - 273.15).toFixed(2) + \"C\",\r\n            population: item.main.temp - 273.15,\r\n          });\r\n        }\r\n      });\r\n    }\r\n    setChartd(resultc);\r\n  };\r\n\r\n  const [fahrenhit, setFahrenhit] = useState(true);\r\n  const [celsius, setCelsius] = useState(false);\r\n  const [chartd, setChartd] = useState(data2);\r\n  const [chartData, setChartData] = useState(data2);\r\n\r\n  const [weather, setWeather] = useState([\r\n    {\r\n      dt_text: \"\",\r\n      temp: 0,\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n  \r\n    if (data != null) {\r\n      console.log(\"Hellow i am in Weather\");\r\n     \r\n      let localData = data.map((item) => {\r\n        item.dt_txt = new Date(item.dt_txt).toDateString();\r\n        return item;\r\n      });\r\n\r\n      const result = [];\r\n      const map = new Map();\r\n      for (const item of localData) {\r\n        if (!map.has(item.dt_txt)) {\r\n          map.set(item.dt_txt, true); // set any value to Map\r\n          result.push({\r\n            dt_text: item.dt_txt,\r\n            temp: item.main.temp,\r\n          });\r\n        }\r\n      }\r\n\r\n      setWeather(result);\r\n      changeBarChar(data[0].dt_txt)\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"section\">\r\n      <div className=\"container\">\r\n        <div>\r\n          <FormControl component=\"fieldset\">\r\n            <RadioGroup\r\n              row\r\n              aria-label=\"position\"\r\n              name=\"position\"\r\n              defaultValue=\"top\"\r\n            >\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                  <FormControlLabel\r\n                    value=\"end\"\r\n                    control={\r\n                      <Radio\r\n                        onClick={handleChange}\r\n                        checked={!fahrenhit}\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label=\"Celcius\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                  <FormControlLabel\r\n                    value=\"end\"\r\n                    control={\r\n                      <Radio\r\n                        onClick={handleChange}\r\n                        checked={fahrenhit}\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label=\"Fahrenheit\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </div>\r\n        <div>\r\n          <Swiper\r\n            spaceBetween={10}\r\n            slidesPerView={3}\r\n            navigation\r\n            onSwiper={(swiper) => console.log(swiper)}\r\n            onSlideChange={() => console.log(\"slide change\")}\r\n          >\r\n            {weather.map((item) => {\r\n              return (\r\n                <SwiperSlide>\r\n                  <div\r\n                    className=\"text-left card_b\"\r\n                    onClick={() => changeBarChar(item.dt_text)}\r\n                  >\r\n                    <div>\r\n                      <h5>Temp:</h5>\r\n                    </div>\r\n                    <div>\r\n                      <p>\r\n                        {fahrenhit\r\n                          ? (item.temp * 1.8 - 459.67).toFixed(0) + \"F\"\r\n                          : (item.temp - 273.15).toFixed(0) + \"C\"}\r\n                      </p>\r\n                    </div>\r\n                    <div>\r\n                      <h5>Date:</h5>\r\n                    </div>\r\n                    <div>\r\n                      <p>{item.dt_text}</p>\r\n                    </div>\r\n                  </div>\r\n                </SwiperSlide>\r\n              );\r\n            })}\r\n          </Swiper>\r\n        </div>\r\n\r\n        <div className=\"container\">\r\n          <Paper>\r\n            <Chart data={chartd}>\r\n              <ArgumentAxis />\r\n\r\n              <BarSeries valueField=\"population\" argumentField=\"year\" />\r\n              \r\n              <Tooltip />\r\n            </Chart>\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","export const GET_WEATHER='GET_WEATHER';\r\nexport const GET_WEATHER_LIST='GET_WEATHER_LIST';\r\nexport const SET_LOADING='SET_LOADING';\r\nexport const SET_ERROR='SET_ERROR';\r\nexport const SET_ALERT='SET_ALERT';\r\n\r\n\r\nexport interface Weather{\r\n    dispcription:string;\r\n    icon:string;\r\n    id:number;\r\n    main:string;\r\n\r\n\r\n}\r\n\r\nexport interface WeatherData{\r\n    base:string;\r\n    clouds:{\r\n        all:number;\r\n\r\n    };\r\n    code:number;\r\n    coord:{\r\n        lon:number;\r\n        late:number;\r\n    };\r\n    dt:number;\r\n    dt_txt: string;\r\n    id:number;\r\n    main:{\r\n        feels_like:number;\r\n        grnd_level:number;\r\n        humidety:number;\r\n        pressure:number;\r\n        sea_level:number;\r\n        temp:number;\r\n        temp_kf:number;\r\n        temp_max:number;\r\n        temp_min:number;\r\n\r\n    };\r\n    pop:number;\r\n    name:string;\r\n    sys:{\r\n        pod:string;\r\n        id:number;\r\n        sunrise:number;\r\n        sunset:number;\r\n        type:number;\r\n\r\n    };\r\n    timezone:number;\r\n    visibility:number;\r\n    weather:Weather[];\r\n    wind:{\r\n        speed: number;\r\n        deg:number;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport interface City {\r\n    id: number;\r\n    name: string;\r\n    country: string;\r\n    population:number;\r\n    timezone: number;\r\n    sunrize: number;\r\n    sunset: number;\r\n    cord:{\r\n        late: number;\r\n        lon: number;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport interface WeatherDataList{\r\n    base:string;\r\n    clouds:{\r\n        all:number;\r\n\r\n    };\r\n    code:number;\r\n    coord:{\r\n        lon:number;\r\n        late:number;\r\n    };\r\n    dt:number;\r\n    dt_txt: string;\r\n    id:number;\r\n    main:{\r\n        feels_like:number;\r\n        grnd_level:number;\r\n        humidety:number;\r\n        pressure:number;\r\n        sea_level:number;\r\n        temp:number;\r\n        temp_kf:number;\r\n        temp_max:number;\r\n        temp_min:number;\r\n\r\n    };\r\n    pop:number;\r\n    name:string;\r\n    sys:{\r\n        pod:string;\r\n        visibility:number\r\n\r\n    };\r\n    timezone:number;\r\n    visibility:number;\r\n    weather:Weather[];\r\n    wind:{\r\n        speed: number;\r\n        deg:number;\r\n        gust:number;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport interface WeatherDataa{\r\n    list:   WeatherDataList[] ;\r\n    loading:boolean;\r\n    error:string;\r\n    city:City ;\r\n    cnt: number ;\r\n    code: number ;\r\n    message: string;\r\n   \r\n}\r\n\r\nexport interface WeatherDataByDate{\r\n    data: Date,\r\n    temp: string;\r\n}\r\n\r\nexport interface WeatherError{\r\n    code:string;\r\n    message:string\r\n}\r\n\r\nexport interface WeatherState{\r\n    list:   WeatherDataList[] | null ;\r\n    loading:boolean;\r\n    error:string;\r\n    city:City  |null;\r\n    cnt: number |null;\r\n    code: number |null;\r\n    message: string;\r\n    \r\n}\r\n\r\nexport interface WeatherStateList{\r\n    list:   WeatherDataList[] |null;\r\n    loading:boolean;\r\n    error:string;\r\n    city:City |null;\r\n    cnt: number |null;\r\n    code: number |null;\r\n    message: string;\r\n    \r\n\r\n}\r\n\r\n\r\n\r\ninterface GetWeatherAction{\r\n    type: typeof GET_WEATHER_LIST;\r\n    payload: WeatherStateList\r\n}\r\n\r\ninterface GetWeatherListAction{\r\n    type: typeof GET_WEATHER_LIST;\r\n    payload: WeatherStateList\r\n}\r\n\r\n\r\ninterface SetLoadingAction{\r\n    type: typeof SET_LOADING\r\n    \r\n}\r\n\r\ninterface SetErrorAction{\r\n    type: typeof SET_ERROR\r\n    payload:string\r\n}\r\n\r\nexport type WeatherAction= GetWeatherAction| SetLoadingAction| SetErrorAction | GetWeatherListAction\r\n\r\nexport interface AlertAction{\r\n    type: typeof SET_ALERT\r\n    payload: string\r\n}\r\n\r\n\r\nexport interface AlertState{\r\n    message:string;\r\n\r\n}\r\n","import React, {FC,useEffect} from 'react';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {RootState} from './store'\nimport Search from './components/search'\nimport Alert from './components/Alert'\nimport Weather from './components/Weather'\nimport {setAlert} from './store/actions/alertAction'\nimport {setError} from './store/actions/weatherAction'\nimport {getWeather, setLoading } from './store/actions/weatherAction'\n\n\n\nconst App: FC =()=>{\n\n  const dispatch = useDispatch();\n  const weatherDataList = useSelector((state: RootState)=> state.weather.list)\n  const loading = useSelector((state: RootState)=> state.weather.loading)\n  const error = useSelector((state: RootState)=> state.weather.error)\n  const alertMsg = useSelector((state: RootState)=> state.alert.message)\n\n  useEffect(() => {\n    dispatch(setLoading())\n     dispatch(getWeather())\n  },[]);\n\n  return (\n    <div className=\"has-text-centered\">\n    \n      {loading ? <h2 className=\"is-size-3 py-2\">Loading ...</h2> : weatherDataList && <Weather data={weatherDataList} />}\n      {alertMsg && <Alert message={alertMsg} onClose={()=>dispatch(setAlert(''))} />}\n      {error && <Alert message={error} onClose={()=> dispatch(setError())}/>}\n  \n   </div>\n  );\n}\n\nexport default App;\n","import {ThunkAction} from 'redux-thunk'\r\nimport { RootState } from '../index';\r\nimport { WeatherAction, WeatherData, WeatherError, GET_WEATHER_LIST, GET_WEATHER, SET_LOADING, SET_ERROR, Weather, WeatherDataList, WeatherStateList } from '../types';\r\n\r\n\r\nexport const getWeather = (): ThunkAction<void, RootState, null , WeatherAction> =>{\r\n    return async dispatch => {\r\n        try{\r\n            const res= await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40`);\r\n\r\n            \r\n            if(!res.ok){\r\n                const resData: WeatherError =  await res.json();\r\n               \r\n                throw new Error(resData.message)\r\n            }\r\n\r\n            const resData:  WeatherStateList = await res.json();\r\n            dispatch({\r\n                type: GET_WEATHER_LIST, \r\n                payload: resData\r\n            })\r\n        }\r\n        catch(err){\r\n            dispatch({\r\n                type: SET_ERROR,\r\n                payload: err.message\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setLoading=(): WeatherAction => {\r\n    return {\r\n        type: SET_LOADING\r\n    }\r\n}\r\n\r\nexport const setError = (): WeatherAction=> {\r\n    return{\r\n        type: SET_ERROR,\r\n        payload: ''\r\n    }\r\n}","import {SET_ALERT, AlertAction} from  '../types';\r\n\r\n\r\nexport const setAlert =(message:string): AlertAction=>{\r\n\r\n    return{\r\n        type: SET_ALERT, \r\n        payload: message\r\n    }\r\n}","import { WeatherState, WeatherAction, WeatherDataList, GET_WEATHER, SET_LOADING, SET_ERROR, GET_WEATHER_LIST, WeatherStateList, City } from '../types';\r\n\r\nconst initialState: WeatherState={\r\n    list: null,\r\n    loading:false,\r\n    error:'',\r\n    city:null,\r\n    cnt: null,\r\n    code: null,\r\n    message: ''\r\n}\r\n\r\nexport default (state=initialState, action:WeatherAction): WeatherState=>{\r\n    switch(action.type){\r\n       \r\n\r\n        case GET_WEATHER_LIST:\r\n            return{\r\n                ...state,\r\n                list: action.payload.list,\r\n                city: action.payload.city,\r\n                loading:false,\r\n                error:'',\r\n            }\r\n        \r\n\r\n        case SET_LOADING:\r\n        return {\r\n            ...state, \r\n            loading:true\r\n        }\r\n\r\n        case SET_ERROR:{\r\n            return{\r\n                ...state,\r\n                error: action.payload,\r\n                loading:false\r\n            }\r\n        }\r\n\r\n        default:{\r\n            return state;\r\n        }\r\n    }\r\n}","import { AlertState, AlertAction, SET_ALERT } from '../types';\r\n\r\nconst initialState: AlertState={\r\n    message:''\r\n}\r\n\r\nexport default(state=initialState, action: AlertAction): AlertState=>{\r\n\r\n    switch(action.type){\r\n\r\n        case SET_ALERT: \r\n        return{\r\n             message: action.payload\r\n        }\r\n\r\n        default:\r\n             return state\r\n\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport weatherReducer from './reducer/weatherReducer';\r\nimport alertReducer  from './reducer/alertReducer'\r\n\r\nconst rootReducer =combineReducers({\r\n    weather:weatherReducer,\r\n    alert: alertReducer\r\n});\r\n\r\n\r\nconst store= createStore(\r\n    rootReducer, \r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport type RootState= ReturnType<typeof rootReducer>;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport '../node_modules/bulma/css/bulma.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport 'swiper/components/pagination/pagination.scss';\nimport 'swiper/components/scrollbar/scrollbar.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n\n    <App />\n    </Provider>\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}